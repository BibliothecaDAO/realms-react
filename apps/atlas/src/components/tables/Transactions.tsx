import { Button } from '@bibliotheca-dao/ui-lib/base';
import { useStarknetTransactionManager } from '@starknet-react/core';
import Link from 'next/link';
import type { Status, TransactionStatus } from 'starknet';
import type { ENQUEUED_STATUS } from '@/constants/index';
import { getTxRenderConfig } from '@/hooks/settling/useTxMessage';
import { ExternalLink } from '@/shared/Icons';

interface Metadata {
  description: string;
  title: string;
  action: string;
  multicalls?: any;
}
interface EnqueuedOrReceivedTransaction {
  metadata?: Metadata;
  status: Status | TransactionStatus | typeof ENQUEUED_STATUS;
  transactionHash?: string;
}
interface TxCartItem {
  transaction: EnqueuedOrReceivedTransaction;
  onRemove?: () => void;
}

const STYLES = {
  status: {
    REJECTED: 'bg-red-400',
    NOT_RECEIVED: 'bg-red-200',
    RECEIVED: 'bg-green-800/40 animate-pulse',
    PENDING: 'bg-orange-500 animate-pulse',
    ACCEPTED_ON_L2: 'bg-green-800/90',
    ACCEPTED_ON_L1: 'bg-green-900',
    TRANSACTION_RECEIVED: 'bg-green-700 animate-pulse',
    ENQUEUED: 'border-white/20 border-4 border-double bg-black/80',
  },
} as const;

const FORMATED_STATUS = {
  status: {
    REJECTED: 'Rejected',
    NOT_RECEIVED: 'No received',
    RECEIVED: 'received',
    PENDING: 'pending',
    ACCEPTED_ON_L2: 'Accepted on StarkNet',
    ACCEPTED_ON_L1: 'Accepted on MainNet',
    TRANSACTION_RECEIVED: 'Transaction Received',
    ENQUEUED: 'ENQUEUED',
  },
} as const;

export const TxCartItem = (props: TxCartItem) => {
  // Multicall descriptions are generated by the TransactionQueueContext
  // as array of objects that describe how to render sub-calls.
  const multicalls = props.transaction.metadata?.multicalls;
  let title: string;
  let description: string;
  if (multicalls) {
    title = 'Actions';
    description = '';
  } else {
    const { title: configTitle, description: configDescription } =
      getTxRenderConfig(props.transaction);
    title = props.transaction.metadata?.title || configTitle;
    description = props.transaction.metadata?.description || configDescription;
  }

  return (
    <div
      className={`${
        STYLES.status[props.transaction.status]
      }  rounded-xl flex p-4 w-full mb-2`}
    >
      <div className="flex flex-wrap w-full p-1 rounded bg-black/19">
        <div className="flex justify-between w-full pb-4 mb-4 border-b border-white/40">
          <h5 className="self-center text-xs uppercase">
            {FORMATED_STATUS.status[props.transaction.status]}
          </h5>
          <div className="self-center ">
            {props.transaction.transactionHash ? (
              <Button
                target={'_blank'}
                size="xs"
                variant="outline"
                rel="noreferrer noopener"
                href={
                  // TODO: use network aware link using @/util/blockExplorer
                  'https://goerli.voyager.online/tx/' +
                  props.transaction.transactionHash
                }
              >
                See on Voyager <ExternalLink className="inline-block w-4" />
              </Button>
            ) : null}
            {props.onRemove && (
              <Button
                size="xs"
                variant="outline"
                texture={false}
                onClick={props.onRemove}
              >
                Remove
              </Button>
            )}
          </div>
        </div>

        <div>
          <h2 className="sm:text-3xl">{title}</h2>
          {multicalls ? (
            multicalls.map((tx, i) => {
              const renderConfig = getTxRenderConfig(tx);
              if (renderConfig) {
                return (
                  <div
                    className="py-2"
                    key={`${props.transaction.transactionHash}:${i}`}
                  >
                    <h5>{renderConfig.title}</h5>
                    <p className="text-lg opacity-75">
                      {renderConfig.description}
                    </p>
                  </div>
                );
              }
              return <p key={i}>{'Transaction'}</p>;
            })
          ) : (
            <p>{description}</p>
          )}
        </div>
      </div>

      {/* <span>{props.transaction.lastUpdatedAt}</span> */}
    </div>
  );
};

export const TransactionCartTable = () => {
  const { transactions } = useStarknetTransactionManager();
  return (
    <div className="flex flex-col-reverse flex-wrap w-full">
      {transactions.map((a, index) => {
        return <TxCartItem key={index} transaction={a} />;
      })}
    </div>
  );
};
