import { Button } from '@bibliotheca-dao/ui-lib/base';
import DragIcon from '@bibliotheca-dao/ui-lib/icons/drag.svg';
import { useStarknetTransactionManager } from '@starknet-react/core';
import type { Identifier, XYCoord } from 'dnd-core';
import Link from 'next/link';
import type { ReactElement } from 'react';
import { useEffect, useRef } from 'react';
import { useDrag, useDrop } from 'react-dnd';
import type { Status, TransactionStatus } from 'starknet';
import { twMerge } from 'tailwind-merge';
import type { ENQUEUED_STATUS } from '@/constants/index';
import { getTxRenderConfig } from '@/hooks/settling/useTxMessage';
import { ExternalLink } from '@/shared/Icons';
import { dndTypes } from '@/types/index';

interface Metadata {
  description: string;
  title: string;
  action: string;
  multicalls?: any;
}
interface EnqueuedOrReceivedTransaction {
  metadata?: Metadata;
  status: Status | TransactionStatus | typeof ENQUEUED_STATUS;
  transactionHash?: string;
}
interface TxCartItem {
  index: number;
  transaction: EnqueuedOrReceivedTransaction;
  onRemove?: () => void;
  onReorder?: (dragIndex: number, hoverIndex: number) => void;
}

const STYLES = {
  status: {
    REJECTED: 'bg-red-400',
    NOT_RECEIVED: 'bg-red-200',
    RECEIVED: 'bg-green-800/40 animate-pulse',
    PENDING: 'bg-orange-500 animate-pulse',
    ACCEPTED_ON_L2: 'bg-green-800/90',
    ACCEPTED_ON_L1: 'bg-green-900',
    TRANSACTION_RECEIVED: 'bg-green-700 animate-pulse',
    ENQUEUED: '  bg-black/80',
  },
} as const;

const FORMATED_STATUS = {
  status: {
    REJECTED: 'Rejected',
    NOT_RECEIVED: 'No received',
    RECEIVED: 'received',
    PENDING: 'pending',
    ACCEPTED_ON_L2: 'Accepted on StarkNet',
    ACCEPTED_ON_L1: 'Accepted on MainNet',
    TRANSACTION_RECEIVED: 'Transaction Received',
    ENQUEUED: 'ENQUEUED',
  },
} as const;

interface DragTx {
  index: number;
  transactionHash: string;
  type: string;
}

export const TxCartItem = (props: TxCartItem) => {
  // Multicall descriptions are generated by the TransactionQueueContext
  // as array of objects that describe how to render sub-calls.
  const ref = useRef<any>(null);

  const multicalls = props.transaction.metadata?.multicalls;
  let title: string;
  let description: string | ReactElement;
  if (multicalls) {
    title = 'Actions';
    description = '';
  } else {
    const { title: configTitle, description: configDescription } =
      getTxRenderConfig(props.transaction);
    title = props.transaction.metadata?.title || configTitle;
    description = (
      <span>
        {props.transaction.metadata?.description || configDescription}
      </span>
    );
  }

  const [{ handlerId }, drop] = useDrop<
    DragTx,
    void,
    { handlerId: Identifier | null }
  >({
    accept: dndTypes.TX,
    collect(monitor) {
      return {
        handlerId: monitor.getHandlerId(),
      };
    },
    hover(item: DragTx, monitor) {
      if (!ref.current) {
        return;
      }
      const dragIndex = item.index;
      const hoverIndex = props.index;

      // Don't replace items with themselves
      if (dragIndex === hoverIndex) {
        return;
      }

      // Determine rectangle on screen
      const hoverBoundingRect = ref.current?.getBoundingClientRect();

      // Get vertical middle
      const hoverMiddleY =
        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2;

      // Determine mouse position
      const clientOffset = monitor.getClientOffset();

      // Get pixels to the top
      const hoverClientY = (clientOffset as XYCoord).y - hoverBoundingRect.top;

      // Only perform the move when the mouse has crossed half of the items height
      // When dragging downwards, only move when the cursor is below 50%
      // When dragging upwards, only move when the cursor is above 50%

      // Dragging downwards
      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {
        return;
      }

      // Dragging upwards
      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {
        return;
      }

      // Time to actually perform the action
      props.onReorder && props.onReorder(dragIndex, hoverIndex);

      // Note: we're mutating the monitor item here!
      // Generally it's better to avoid mutations,
      // but it's good here for the sake of performance
      // to avoid expensive index searches.
      item.index = hoverIndex;
    },
  });
  const [{ isDragging }, drag] = useDrag({
    type: dndTypes.TX,
    item: () => {
      return {
        transactionHash: props.transaction.transactionHash,
        index: props.index,
      };
    },
    collect: (monitor: any) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  // no dnd if tx is in status tab
  props.onRemove && drag(drop(ref));

  return (
    <div
      ref={ref}
      data-handler-id={handlerId}
      className={twMerge(
        STYLES.status[props.transaction.status],
        `rounded-xl flex p-4 w-full mb-2  border card`,
        isDragging ? 'opacity-0' : 'opacity-100'
      )}
    >
      {props.onRemove && (
        <DragIcon className="fill-current w-5 -translate-x-1.5 cursor-grab" />
      )}
      <div className="flex flex-wrap w-full p-1 rounded bg-black/19">
        <div className="flex justify-between w-full pb-2 mb-2 border-b border-white/20">
          <h5 className="self-center uppercase">
            {FORMATED_STATUS.status[props.transaction.status]}
          </h5>
          <div className="self-center ">
            {props.transaction.transactionHash ? (
              <Button
                target={'_blank'}
                size="xs"
                variant="outline"
                rel="noreferrer noopener"
                href={
                  // TODO: use network aware link using @/util/blockExplorer
                  'https://goerli.voyager.online/tx/' +
                  props.transaction.transactionHash
                }
              >
                See on Voyager <ExternalLink className="inline-block w-4" />
              </Button>
            ) : null}
            {props.onRemove && (
              <Button
                size="xs"
                variant="outline"
                texture={false}
                onClick={props.onRemove}
              >
                Remove
              </Button>
            )}
          </div>
        </div>

        <div>
          <h3>{title}</h3>
          {multicalls ? (
            multicalls.map((tx, i) => {
              const renderConfig = getTxRenderConfig(tx);
              if (renderConfig) {
                return (
                  <div
                    className="py-2"
                    key={`${props.transaction.transactionHash}:${i}`}
                  >
                    <h5 className="uppercase">{renderConfig.title}</h5>
                    <p className="text-lg font-semibold opacity-75">
                      {renderConfig.description}
                    </p>
                  </div>
                );
              }
              return <p key={i}>{'Transaction'}</p>;
            })
          ) : (
            <p>{description}</p>
          )}
        </div>
      </div>
      {/* <span>{props.transaction.lastUpdatedAt}</span> */}
    </div>
  );
};

export const TransactionCartTable = () => {
  const { transactions } = useStarknetTransactionManager();
  return (
    <div className="flex flex-col-reverse flex-wrap w-full">
      {transactions.map((a, index) => {
        return <TxCartItem index={index} key={index} transaction={a} />;
      })}
    </div>
  );
};
