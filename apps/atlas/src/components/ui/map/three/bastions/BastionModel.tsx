/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 public/models/bastion_exportTest3.glb --types
*/

import { useGLTF } from '@react-three/drei';
import type * as THREE from 'three';
import type { GLTF } from 'three-stdlib';
import { useBastionContext } from '@/context/BastionContext';
import { cloneMaterialWithBlueTint, ClickableMesh } from './ClickableMesh';

type GLTFResult = GLTF & {
  nodes: {
    instanced_meshes001: THREE.Mesh;
    river: THREE.Mesh;
    gate_inner_1: THREE.Mesh;
    gate_inner_2: THREE.Mesh;
    gate_inner_3: THREE.Mesh;
    gate_inner_4: THREE.Mesh;
    gate_north: THREE.Mesh;
    gate_east: THREE.Mesh;
    gate_south: THREE.Mesh;
    gate_west: THREE.Mesh;
    tower: THREE.Mesh;
    tower_1: THREE.Mesh;
    tower_2: THREE.Mesh;
    tower_3: THREE.Mesh;
    tower_4: THREE.Mesh;
    tower_5: THREE.Mesh;
    tower_6: THREE.Mesh;
    tower_7: THREE.Mesh;
    tower_8: THREE.Mesh;
    tower_9: THREE.Mesh;
    tower_10: THREE.Mesh;
    tower_11: THREE.Mesh;
    center001_1: THREE.Mesh;
    center001_2: THREE.Mesh;
    center001_3: THREE.Mesh;
    center001_4: THREE.Mesh;
    center001_5: THREE.Mesh;
    center001_6: THREE.Mesh;
    wall_inner_northeast: THREE.Mesh;
    wall_inner_northwest: THREE.Mesh;
    wall_inner_southeast: THREE.Mesh;
    wall_inner_southwest: THREE.Mesh;
    wall_outer_northeast: THREE.Mesh;
    wall_outer_northwest: THREE.Mesh;
    wall_outer_southeast: THREE.Mesh;
    wall_outer_southwest: THREE.Mesh;
    bridge001: THREE.Mesh;
    bridge005: THREE.Mesh;
    south_inward_bridge: THREE.Mesh;
    west_inward_bridge: THREE.Mesh;
    bridge: THREE.Mesh;
    bridge006: THREE.Mesh;
    bridge004: THREE.Mesh;
    bridge008: THREE.Mesh;
    road_from_east: THREE.Mesh;
    road_from_south: THREE.Mesh;
    road_from_west: THREE.Mesh;
    road_from_north: THREE.Mesh;
    road_to_east: THREE.Mesh;
    road_to_north: THREE.Mesh;
    road_to_west: THREE.Mesh;
    road_to_south: THREE.Mesh;
    road_clockwise_southeast: THREE.Mesh;
    road_clockwise_northeast: THREE.Mesh;
    road_clockwise_northwest: THREE.Mesh;
    road_clockwise_southwest: THREE.Mesh;
    road_counterclockwise_northeast: THREE.Mesh;
    road_counterclockwise_northwest: THREE.Mesh;
    road_counterclockwise_southwest: THREE.Mesh;
    road_counterclockwise_southeast: THREE.Mesh;
    terrain: THREE.Mesh;
    foundation: THREE.Mesh;
  };
  materials: {
    Stone: THREE.MeshStandardMaterial;
    Water: THREE.MeshPhysicalMaterial;
    Shingles: THREE.MeshStandardMaterial;
    Dirt: THREE.MeshStandardMaterial;
    Terrain: THREE.MeshStandardMaterial;
  };
};

export function BastionModel(props: JSX.IntrinsicElements['group']) {
  const {
    bastionContext: { setSelectedLocation },
  } = useBastionContext();

  const { nodes, materials } = useGLTF(
    'models/bastion_exportTest5.glb'
  ) as GLTFResult;

  const glowStoneMaterial = cloneMaterialWithBlueTint(materials.Stone);
  const glowShinglesMaterial = cloneMaterialWithBlueTint(materials.Shingles);
  const glowDirtMaterial = cloneMaterialWithBlueTint(materials.Dirt);
  const glowWaterMaterial = cloneMaterialWithBlueTint(materials.Water);

  const handleClick = ({ id, defender }: { id: number; defender: boolean }) => {
    setSelectedLocation({ locationId: id, defender: defender });
  };

  return (
    <group {...props} dispose={null}>
      <mesh
        geometry={nodes.instanced_meshes001.geometry}
        material={materials.Stone}
      />
      <ClickableMesh>
        <mesh
          onClick={() => handleClick({ id: 0, defender: false })}
          geometry={nodes.river.geometry}
          baseMaterial={materials.Water}
          glowMaterial={glowWaterMaterial}
          position={[-215.31, -45.03, -153.03]}
          onClick={() => handleClick({ id: 0, defender: false })}
          scale={35.77}
        />
      </ClickableMesh>
      <group
        name={'inner_gate'}
        onClick={() => handleClick({ id: 5, defender: false })}
      >
        <ClickableMesh>
          <mesh
            geometry={nodes.gate_inner_1.geometry}
            baseMaterial={materials.Stone}
            glowMaterial={glowStoneMaterial}
            position={[0, 14.7, 0]}
            rotation={[0, Math.PI / 4, 0]}
          />
          <mesh
            geometry={nodes.gate_inner_2.geometry}
            baseMaterial={materials.Dirt}
            glowMaterial={glowDirtMaterial}
            position={[0, 14.7, 0]}
            rotation={[0, Math.PI / 4, 0]}
          />
          <mesh
            geometry={nodes.gate_inner_3.geometry}
            baseMaterial={materials.Stone}
            glowMaterial={glowStoneMaterial}
            position={[0, 14.7, 0]}
            rotation={[-Math.PI, Math.PI / 4, -Math.PI]}
          />
          <mesh
            geometry={nodes.gate_inner_4.geometry}
            baseMaterial={materials.Dirt}
            glowMaterial={glowDirtMaterial}
            position={[0, 14.7, 0]}
            rotation={[-Math.PI, Math.PI / 4, -Math.PI]}
          />
        </ClickableMesh>
      </group>
      <ClickableMesh>
        <mesh
          name={'north_gate'}
          onClick={() => handleClick({ id: 1, defender: false })}
          geometry={nodes.gate_north.geometry}
          baseMaterial={materials.Stone}
          glowMaterial={glowStoneMaterial}
          position={[0, -99.35, 0]}
        ></mesh>
      </ClickableMesh>
      <ClickableMesh>
        <mesh
          onClick={() => handleClick({ id: 2, defender: false })}
          geometry={nodes.gate_east.geometry}
          baseMaterial={materials.Stone}
          glowMaterial={glowStoneMaterial}
          position={[0, -99.35, 0]}
          rotation={[0, -Math.PI / 2, 0]}
        />
      </ClickableMesh>
      <ClickableMesh>
        <mesh
          onClick={() => handleClick({ id: 3, defender: false })}
          geometry={nodes.gate_south.geometry}
          baseMaterial={materials.Stone}
          glowMaterial={glowStoneMaterial}
          position={[0, -99.35, 0]}
          rotation={[Math.PI, 0, Math.PI]}
        />
      </ClickableMesh>
      <ClickableMesh>
        <mesh
          onClick={() => handleClick({ id: 4, defender: false })}
          geometry={nodes.gate_west.geometry}
          baseMaterial={materials.Stone}
          glowMaterial={glowStoneMaterial}
          position={[0, -99.35, 0]}
          rotation={[0, Math.PI / 2, 0]}
        />
      </ClickableMesh>
      <group
        position={[0, -75.11, 0]}
        onClick={() => handleClick({ id: 1, defender: true })}
      >
        <ClickableMesh>
          <mesh
            geometry={nodes.tower.geometry}
            baseMaterial={materials.Stone}
            glowMaterial={glowStoneMaterial}
          />
          <mesh
            geometry={nodes.tower_1.geometry}
            baseMaterial={materials.Shingles}
            glowMaterial={glowShinglesMaterial}
          />
          <mesh
            geometry={nodes.tower_2.geometry}
            baseMaterial={materials.Dirt}
            glowMaterial={glowDirtMaterial}
          />
        </ClickableMesh>
      </group>
      <group
        position={[0, -75.11, 0]}
        rotation={[0, -Math.PI / 2, 0]}
        onClick={() => handleClick({ id: 2, defender: true })}
      >
        <ClickableMesh>
          <mesh
            geometry={nodes.tower_3.geometry}
            baseMaterial={materials.Stone}
            glowMaterial={glowStoneMaterial}
          />
          <mesh
            geometry={nodes.tower_4.geometry}
            baseMaterial={materials.Shingles}
            glowMaterial={glowShinglesMaterial}
          />
          <mesh
            geometry={nodes.tower_5.geometry}
            baseMaterial={materials.Dirt}
            glowMaterial={glowDirtMaterial}
          />
        </ClickableMesh>
      </group>
      <group
        position={[0, -75.11, 0]}
        rotation={[0, Math.PI / 2, 0]}
        onClick={() => handleClick({ id: 4, defender: true })}
      >
        <ClickableMesh>
          <mesh
            geometry={nodes.tower_6.geometry}
            baseMaterial={materials.Stone}
            glowMaterial={glowStoneMaterial}
          />
          <mesh
            geometry={nodes.tower_7.geometry}
            baseMaterial={materials.Shingles}
            glowMaterial={glowShinglesMaterial}
          />
          <mesh
            geometry={nodes.tower_8.geometry}
            baseMaterial={materials.Dirt}
            glowMaterial={glowDirtMaterial}
          />
        </ClickableMesh>
      </group>
      <group
        position={[0, -75.11, 0]}
        rotation={[Math.PI, 0, Math.PI]}
        onClick={() => handleClick({ id: 3, defender: true })}
      >
        <ClickableMesh>
          <mesh
            geometry={nodes.tower_9.geometry}
            baseMaterial={materials.Stone}
            glowMaterial={glowStoneMaterial}
          />
          <mesh
            geometry={nodes.tower_10.geometry}
            baseMaterial={materials.Shingles}
            glowMaterial={glowShinglesMaterial}
          />
          <mesh
            geometry={nodes.tower_11.geometry}
            baseMaterial={materials.Dirt}
            glowMaterial={glowDirtMaterial}
          />
        </ClickableMesh>
      </group>
      <group onClick={() => handleClick({ id: 5, defender: true })}>
        <ClickableMesh>
          <mesh
            position={[0, 7.97, 0]}
            rotation={[0, Math.PI / 4, 0]}
            geometry={nodes.center001_1.geometry}
            baseMaterial={materials.Stone}
            glowMaterial={glowStoneMaterial}
          />
          <mesh
            position={[0, 7.97, 0]}
            rotation={[0, Math.PI / 4, 0]}
            geometry={nodes.center001_2.geometry}
            baseMaterial={materials.Shingles}
            glowMaterial={glowShinglesMaterial}
          />
          <mesh
            position={[0, 7.97, 0]}
            rotation={[0, Math.PI / 4, 0]}
            geometry={nodes.center001_3.geometry}
            baseMaterial={materials.Dirt}
            glowMaterial={glowDirtMaterial}
          />
          <mesh
            position={[0, 7.97, 0]}
            rotation={[-Math.PI, Math.PI / 4, -Math.PI]}
            geometry={nodes.center001_4.geometry}
            baseMaterial={materials.Stone}
            glowMaterial={glowStoneMaterial}
          />
          <mesh
            position={[0, 7.97, 0]}
            rotation={[-Math.PI, Math.PI / 4, -Math.PI]}
            geometry={nodes.center001_5.geometry}
            baseMaterial={materials.Shingles}
            glowMaterial={glowShinglesMaterial}
          />
          <mesh
            position={[0, 7.97, 0]}
            rotation={[-Math.PI, Math.PI / 4, -Math.PI]}
            geometry={nodes.center001_6.geometry}
            baseMaterial={materials.Dirt}
            glowMaterial={glowDirtMaterial}
          />
        </ClickableMesh>
      </group>
      <group position={[0, 4.84, 0]} rotation={[0, -Math.PI / 4, 0]}>
        <mesh geometry={nodes.wall_inner.geometry} material={materials.Stone} />
        <mesh
          geometry={nodes.wall_inner_1.geometry}
          material={materials.Dirt}
        />
      </group>
      <group position={[0, 4.84, 0]} rotation={[0, Math.PI / 4, 0]}>
        <mesh
          geometry={nodes.wall_inner_2.geometry}
          material={materials.Stone}
        />
        <mesh
          geometry={nodes.wall_inner_3.geometry}
          material={materials.Dirt}
        />
      </group>
      <group
        position={[0, 4.84, 0]}
        rotation={[Math.PI, -Math.PI / 4, Math.PI]}
      >
        <mesh
          geometry={nodes.wall_inner_4.geometry}
          material={materials.Stone}
        />
        <mesh
          geometry={nodes.wall_inner_5.geometry}
          material={materials.Dirt}
        />
      </group>
      <group
        position={[0, 4.84, 0]}
        rotation={[-Math.PI, Math.PI / 4, -Math.PI]}
      >
        <mesh
          geometry={nodes.wall_inner_6.geometry}
          material={materials.Stone}
        />
        <mesh
          geometry={nodes.wall_inner_7.geometry}
          material={materials.Dirt}
        />
      </group>
      <group
        position={[0, 4.37, 0]}
        rotation={[0, -Math.PI / 4, 0]}
        scale={1.06}
      >
        <mesh geometry={nodes.wall_outer.geometry} material={materials.Stone} />
        <mesh
          geometry={nodes.wall_outer_1.geometry}
          material={materials.Dirt}
        />
      </group>
      <group
        position={[0, 4.37, 0]}
        rotation={[0, Math.PI / 4, 0]}
        scale={1.06}
      >
        <mesh
          geometry={nodes.wall_outer_2.geometry}
          material={materials.Stone}
        />
        <mesh
          geometry={nodes.wall_outer_3.geometry}
          material={materials.Dirt}
        />
      </group>
      <group
        position={[0, 4.37, 0]}
        rotation={[Math.PI, -Math.PI / 4, Math.PI]}
        scale={1.06}
      >
        <mesh
          geometry={nodes.wall_outer_4.geometry}
          material={materials.Stone}
        />
        <mesh
          geometry={nodes.wall_outer_5.geometry}
          material={materials.Dirt}
        />
      </group>
      <group
        position={[0, 4.37, 0]}
        rotation={[-Math.PI, Math.PI / 4, -Math.PI]}
        scale={1.06}
      >
        <mesh
          geometry={nodes.wall_outer_6.geometry}
          material={materials.Stone}
        />
        <mesh
          geometry={nodes.wall_outer_7.geometry}
          material={materials.Dirt}
        />
      </group>
      <group position={[0, -1.36, 0]}>
        <mesh geometry={nodes.bridge_1.geometry} material={materials.Stone} />
        <mesh geometry={nodes.bridge_2.geometry} material={materials.Dirt} />
      </group>
      <group position={[-0.35, -1.36, 0.77]} rotation={[0, -1.57, 0]}>
        <mesh geometry={nodes.bridge_1.geometry} material={materials.Stone} />
        <mesh geometry={nodes.bridge_2.geometry} material={materials.Dirt} />
      </group>
      <group position={[-0.74, -1.36, 0]} rotation={[Math.PI, 0, Math.PI]}>
        <mesh geometry={nodes.bridge_1.geometry} material={materials.Stone} />
        <mesh geometry={nodes.bridge_2.geometry} material={materials.Dirt} />
      </group>
      <group position={[-0.35, -1.36, -1.47]} rotation={[0, 1.57, 0]}>
        <mesh geometry={nodes.bridge_1.geometry} material={materials.Stone} />
        <mesh geometry={nodes.bridge_2.geometry} material={materials.Dirt} />
      </group>
      <group position={[-16.39, -1.36, 0]}>
        <mesh geometry={nodes.bridge_1.geometry} material={materials.Stone} />
        <mesh geometry={nodes.bridge_2.geometry} material={materials.Dirt} />
      </group>
      <group position={[-0.35, -1.36, -15.62]} rotation={[0, -1.57, 0]}>
        <mesh geometry={nodes.bridge_1.geometry} material={materials.Stone} />
        <mesh geometry={nodes.bridge_2.geometry} material={materials.Dirt} />
      </group>
      <group position={[15.65, -1.36, 0]} rotation={[Math.PI, 0, Math.PI]}>
        <mesh geometry={nodes.bridge_1.geometry} material={materials.Stone} />
        <mesh geometry={nodes.bridge_2.geometry} material={materials.Dirt} />
      </group>
      <group position={[-0.35, -1.36, 14.92]} rotation={[0, 1.57, 0]}>
        <mesh geometry={nodes.bridge_1.geometry} material={materials.Stone} />
        <mesh geometry={nodes.bridge_2.geometry} material={materials.Dirt} />
      </group>
      <mesh
        geometry={nodes.road_from_east.geometry}
        material={materials.Dirt}
        position={[185.63, -13.51, 0]}
        rotation={[0, 0, -0.13]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.road_from_south.geometry}
        material={materials.Dirt}
        position={[-1.91, -12.41, 189.49]}
        rotation={[-Math.PI, -1.5, 3.01]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.road_from_west.geometry}
        material={materials.Dirt}
        position={[-199.96, -10.86, 13.28]}
        rotation={[-Math.PI, 0.23, 3.01]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.road_from_north.geometry}
        material={materials.Dirt}
        position={[-5.16, -14.51, -193.16]}
        rotation={[0, 1.47, -0.13]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.road_to_east.geometry}
        material={materials.Dirt}
        position={[159.06, -15.18, -35.13]}
        rotation={[0, 1.4, -0.13]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.road_to_north.geometry}
        material={materials.Dirt}
        position={[-36.2, -15.18, -161.65]}
        rotation={[-Math.PI, 0.25, 3.01]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.road_to_west.geometry}
        material={materials.Dirt}
        position={[-153.37, -11.87, 31.94]}
        rotation={[-Math.PI, -1.39, 3.01]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.road_to_south.geometry}
        material={materials.Dirt}
        position={[30.87, -11.87, 155.94]}
        rotation={[0, -0.38, -0.13]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.road_clockwise_southeast.geometry}
        material={materials.Dirt}
        position={[113.29, -5.37, 109.62]}
        rotation={[-0.56, -1.4, -0.48]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.road_clockwise_northeast.geometry}
        material={materials.Dirt}
        position={[106.57, -4.37, -112.54]}
        rotation={[-0.09, 0.18, 0.09]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.road_clockwise_northwest.geometry}
        material={materials.Dirt}
        position={[-112.93, -5.35, -102.65]}
        rotation={[-2.78, 1.31, 2.87]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.road_clockwise_southwest.geometry}
        material={materials.Dirt}
        position={[-101.78, -5.35, 109.65]}
        rotation={[-3.05, -0.2, -3.05]}
        scale={[4.53, 1, 1]}
      />
      <mesh
        geometry={nodes.terrain.geometry}
        material={materials.Terrain}
        position={[-241.95, 67.78, -153.03]}
        rotation={[-0.04, 0, 0]}
        scale={[1222.96, 1288.39, 1223.09]}
      />
      <mesh
        geometry={nodes.foundation.geometry}
        material={materials.Terrain}
        position={[0, 9.46, 0]}
        scale={-129.99}
      />
    </group>
  );
}

useGLTF.preload('models/bastion_exportTest5.glb');

function findObjectByName(scene, name) {
  let result = null;

  scene.traverse((object) => {
    if (object.name === name) {
      result = object;
    }
  });

  return result;
}
