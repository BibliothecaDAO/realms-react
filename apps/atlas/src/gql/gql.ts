/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "fragment DesiegeFragment on Desiege {\n  id\n  gameId\n  winner\n  attackedTokens\n  defendedTokens\n  eventIndexed\n  initialHealth\n  startedOn\n}": types.DesiegeFragmentFragmentDoc,
    "query getDesiege($id: Float!) @api(name: starkIndexer) {\n  getDesiege(id: $id) {\n    ...DesiegeFragment\n  }\n}": types.GetDesiegeDocument,
    "query getExchangeRates @api(name: starkIndexer) {\n  getExchangeRates {\n    tokenId\n    tokenName\n    amount\n    buyAmount\n    sellAmount\n    currencyReserve\n    tokenReserve\n    percentChange24Hr\n  }\n}": types.GetExchangeRatesDocument,
    "query getHistoricPriceData($dateFrom: String!, $dateTo: String!) @api(name: starkIndexer) {\n  exchangeRates(\n    where: {date: {gt: $dateFrom, lte: $dateTo}}\n    orderBy: {date: asc}\n  ) {\n    date\n    hour\n    tokenId\n    amount\n  }\n}": types.GetHistoricPriceDataDocument,
    "query getLoreEntities($filter: LoreEntityWhereInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  getLoreEntities(filter: $filter, take: $take, skip: $skip) {\n    ...LoreEntityFragment\n  }\n}": types.GetLoreEntitiesDocument,
    "query getLoreEntity($id: Float!) @api(name: starkIndexer) {\n  getLoreEntity(entityId: $id) {\n    ...LoreEntityFragment\n    revisions {\n      markdown\n    }\n  }\n}": types.GetLoreEntityDocument,
    "query getLorePois($take: Float, $skip: Float) @api(name: starkIndexer) {\n  getLorePois(take: $take, skip: $skip) {\n    ...LorePoiFragment\n  }\n}": types.GetLorePoisDocument,
    "fragment LoreEntityFragment on LoreEntity {\n  id\n  owner\n  ownerDisplayName\n  kind\n  revisions {\n    revisionNumber\n    title\n    excerpt\n    createdAt\n  }\n}": types.LoreEntityFragmentFragmentDoc,
    "fragment LorePoiFragment on LorePoi {\n  id\n  name\n  assetType\n}": types.LorePoiFragmentFragmentDoc,
    "query getAccount($account: String!, $realmIds: [Int!]) @api(name: starkIndexer) {\n  ownedRealmsCount: realmsCount(filter: {ownerL2: {equals: $account}})\n  settledRealmsCount: realmsCount(filter: {settledOwner: {equals: $account}})\n  accountHistory: getRealmHistory(filter: {realmId: {in: $realmIds}}) {\n    id\n    eventType\n    eventId\n    realmId\n    realmOwner\n    realmName\n    realmOrder\n    data\n    timestamp\n  }\n}": types.GetAccountDocument,
    "query getGameConstants @api(name: starkIndexer) {\n  battalionStats: battalionStats {\n    battalionId\n    battalionName\n    type\n    combatType\n    value\n    requiredBuildingId\n    requiredBuildingName\n  }\n  buildingCosts: getBuildingCosts {\n    buildingId\n    buildingName\n    amount\n    resources\n  }\n  battalionCosts {\n    battalionId\n    battalionName\n    resources\n  }\n}": types.GetGameConstantsDocument,
    "query getRealm($id: Float!) @api(name: starkIndexer) {\n  realm(id: $id) {\n    ...RealmFragment\n  }\n}\n\nquery getBuildingsByRealmId($id: Float!) @api(name: starkIndexer) {\n  getBuildingsByRealmId(id: $id) {\n    realmId\n    buildingId\n    buildingName\n    buildingIntegrity\n    limit\n    limitTraitId\n    limitTraitName\n    count\n    population\n    food\n    culture\n    buildingCost {\n      amount\n      resources\n    }\n  }\n}\n\nquery getFoodByRealmId($id: Float!) @api(name: starkIndexer) {\n  getFoodByRealmId(id: $id) {\n    realmId\n    buildingId\n    buildingName\n    qty\n    harvests\n    createdAt\n  }\n}\n\nquery getRealmHistory($filter: RealmHistoryWhereInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  getRealmHistory(filter: $filter, take: $take, skip: $skip) {\n    id\n    eventId\n    eventType\n    realmId\n    realmOwner\n    data\n    timestamp\n    transactionHash\n  }\n}\n\nquery groupByRealmHistory($by: [RealmHistoryScalarFieldEnum!]!, $orderBy: [RealmHistoryOrderByWithAggregationInput!], $where: RealmHistoryWhereInput, $take: Int, $skip: Int, $isOwner: Boolean!) @api(name: starkIndexer) {\n  groupByRealmHistory(\n    by: $by\n    where: $where\n    orderBy: $orderBy\n    take: $take\n    skip: $skip\n  ) {\n    realmId @skip(if: $isOwner)\n    realmOwner @include(if: $isOwner)\n    _count {\n      _all\n    }\n  }\n}\n\nquery getRealmCombatResult($defendRealmId: Float!, $transactionHash: String!) @api(name: starkIndexer) {\n  getRealmCombatResult(\n    defendRealmId: $defendRealmId\n    transactionHash: $transactionHash\n  ) {\n    defendRealmId\n    attackRealmId\n    transactionHash\n    history {\n      eventType\n      attackSquad\n      defendSquad\n      outcome\n      attackType\n      hitPoints\n      timestamp\n    }\n    resourcesPillaged {\n      resourceId\n      resourceName\n      amount\n    }\n    relicLost\n    outcome\n    timestamp\n  }\n}": types.GetRealmDocument,
    "query getRealms($filter: RealmWhereInput, $orderBy: RealmOrderByWithRelationInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  realms(filter: $filter, orderBy: $orderBy, take: $take, skip: $skip) {\n    ...RealmFragment\n  }\n  total: realmsCount(filter: $filter)\n}\n\nquery getRealmsWithTravels($filter: RealmWhereInput, $travelsWhere: TravelWhereInput, $orderBy: RealmOrderByWithRelationInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  realms(filter: $filter, orderBy: $orderBy, take: $take, skip: $skip) {\n    ...RealmFragment\n  }\n  travels(where: $travelsWhere) {\n    ...TravelFragment\n  }\n  total: realmsCount(filter: $filter)\n}": types.GetRealmsDocument,
    "query getTroopStats @api(name: starkIndexer) {\n  getTroopStats {\n    troopId\n    troopName\n    type\n    tier\n    agility\n    attack\n    armor\n    vitality\n    wisdom\n    troopCost {\n      amount\n      resources\n    }\n  }\n}": types.GetTroopStatsDocument,
    "fragment RealmFragment on Realm {\n  realmId\n  owner\n  bridgedOwner\n  ownerL2\n  settledOwner\n  name\n  rarityRank\n  rarityScore\n  orderType\n  wonder\n  lastAttacked\n  lastClaimTime\n  lastVaultTime\n  longitude\n  latitude\n  resources {\n    resourceId\n    resourceName\n    level\n    upgrades\n  }\n  traits {\n    type\n    qty\n  }\n  relic {\n    realmId\n    heldByRealm\n  }\n  relicsOwned {\n    realmId\n    heldByRealm\n  }\n  ...RealmBuildingsFragment\n  ...RealmTroopsFragment\n  ...RealmArmiesFragment\n}": types.RealmFragmentFragmentDoc,
    "fragment RealmArmiesFragment on Realm {\n  ownArmies {\n    armyId\n    realmId\n    xp\n    destinationRealmId\n    destinationArrivalTime\n    armyPacked\n    lastAttacked\n    xp\n    level\n    callSign\n    lightCavalryQty\n    lightCavalryHealth\n    heavyCavalryQty\n    heavyCavalryHealth\n    archerQty\n    archerHealth\n    longbowQty\n    longbowHealth\n    mageQty\n    mageHealth\n    arcanistQty\n    arcanistHealth\n    lightInfantryQty\n    lightInfantryHealth\n    heavyInfantryQty\n    heavyInfantryHealth\n  }\n}": types.RealmArmiesFragmentFragmentDoc,
    "fragment RealmBuildingsFragment on Realm {\n  buildings {\n    buildingId\n    buildingName\n    buildingIntegrity\n    count\n    population\n    culture\n    food\n    limitTraitId\n    limitTraitName\n  }\n}": types.RealmBuildingsFragmentFragmentDoc,
    "fragment RealmTroopsFragment on Realm {\n  troops {\n    realmId\n    troopId\n    troopName\n    index\n    type\n    tier\n    agility\n    attack\n    armor\n    vitality\n    wisdom\n    squadSlot\n  }\n}": types.RealmTroopsFragmentFragmentDoc,
    "fragment TravelFragment on Travel {\n  contractId\n  tokenId\n  nestedId\n  destinationContractId\n  destinationTokenId\n  destinationNestedId\n  destinationArrivalTime\n}": types.TravelFragmentFragmentDoc,
    "fragment ResourceFragment on Resource {\n  id\n  resourceId\n  resourceName\n  realmId\n}": types.ResourceFragmentFragmentDoc,
    "query getWallet($address: String!) @api(name: starkIndexer) {\n  getWallet(address: $address) {\n    address\n    realmsL1Held\n    realmsL2Held\n    realmsSettledHeld\n    realmsBridgedHeld\n  }\n}": types.GetWalletDocument,
    "query GetWalletBalances($address: String!) @api(name: starkIndexer) {\n  walletBalances(where: {address: {equals: $address}}, orderBy: {tokenId: asc}) {\n    tokenId\n    amount\n  }\n}": types.GetWalletBalancesDocument,
};

export function graphql(source: "fragment DesiegeFragment on Desiege {\n  id\n  gameId\n  winner\n  attackedTokens\n  defendedTokens\n  eventIndexed\n  initialHealth\n  startedOn\n}"): (typeof documents)["fragment DesiegeFragment on Desiege {\n  id\n  gameId\n  winner\n  attackedTokens\n  defendedTokens\n  eventIndexed\n  initialHealth\n  startedOn\n}"];
export function graphql(source: "query getDesiege($id: Float!) @api(name: starkIndexer) {\n  getDesiege(id: $id) {\n    ...DesiegeFragment\n  }\n}"): (typeof documents)["query getDesiege($id: Float!) @api(name: starkIndexer) {\n  getDesiege(id: $id) {\n    ...DesiegeFragment\n  }\n}"];
export function graphql(source: "query getExchangeRates @api(name: starkIndexer) {\n  getExchangeRates {\n    tokenId\n    tokenName\n    amount\n    buyAmount\n    sellAmount\n    currencyReserve\n    tokenReserve\n    percentChange24Hr\n  }\n}"): (typeof documents)["query getExchangeRates @api(name: starkIndexer) {\n  getExchangeRates {\n    tokenId\n    tokenName\n    amount\n    buyAmount\n    sellAmount\n    currencyReserve\n    tokenReserve\n    percentChange24Hr\n  }\n}"];
export function graphql(source: "query getHistoricPriceData($dateFrom: String!, $dateTo: String!) @api(name: starkIndexer) {\n  exchangeRates(\n    where: {date: {gt: $dateFrom, lte: $dateTo}}\n    orderBy: {date: asc}\n  ) {\n    date\n    hour\n    tokenId\n    amount\n  }\n}"): (typeof documents)["query getHistoricPriceData($dateFrom: String!, $dateTo: String!) @api(name: starkIndexer) {\n  exchangeRates(\n    where: {date: {gt: $dateFrom, lte: $dateTo}}\n    orderBy: {date: asc}\n  ) {\n    date\n    hour\n    tokenId\n    amount\n  }\n}"];
export function graphql(source: "query getLoreEntities($filter: LoreEntityWhereInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  getLoreEntities(filter: $filter, take: $take, skip: $skip) {\n    ...LoreEntityFragment\n  }\n}"): (typeof documents)["query getLoreEntities($filter: LoreEntityWhereInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  getLoreEntities(filter: $filter, take: $take, skip: $skip) {\n    ...LoreEntityFragment\n  }\n}"];
export function graphql(source: "query getLoreEntity($id: Float!) @api(name: starkIndexer) {\n  getLoreEntity(entityId: $id) {\n    ...LoreEntityFragment\n    revisions {\n      markdown\n    }\n  }\n}"): (typeof documents)["query getLoreEntity($id: Float!) @api(name: starkIndexer) {\n  getLoreEntity(entityId: $id) {\n    ...LoreEntityFragment\n    revisions {\n      markdown\n    }\n  }\n}"];
export function graphql(source: "query getLorePois($take: Float, $skip: Float) @api(name: starkIndexer) {\n  getLorePois(take: $take, skip: $skip) {\n    ...LorePoiFragment\n  }\n}"): (typeof documents)["query getLorePois($take: Float, $skip: Float) @api(name: starkIndexer) {\n  getLorePois(take: $take, skip: $skip) {\n    ...LorePoiFragment\n  }\n}"];
export function graphql(source: "fragment LoreEntityFragment on LoreEntity {\n  id\n  owner\n  ownerDisplayName\n  kind\n  revisions {\n    revisionNumber\n    title\n    excerpt\n    createdAt\n  }\n}"): (typeof documents)["fragment LoreEntityFragment on LoreEntity {\n  id\n  owner\n  ownerDisplayName\n  kind\n  revisions {\n    revisionNumber\n    title\n    excerpt\n    createdAt\n  }\n}"];
export function graphql(source: "fragment LorePoiFragment on LorePoi {\n  id\n  name\n  assetType\n}"): (typeof documents)["fragment LorePoiFragment on LorePoi {\n  id\n  name\n  assetType\n}"];
export function graphql(source: "query getAccount($account: String!, $realmIds: [Int!]) @api(name: starkIndexer) {\n  ownedRealmsCount: realmsCount(filter: {ownerL2: {equals: $account}})\n  settledRealmsCount: realmsCount(filter: {settledOwner: {equals: $account}})\n  accountHistory: getRealmHistory(filter: {realmId: {in: $realmIds}}) {\n    id\n    eventType\n    eventId\n    realmId\n    realmOwner\n    realmName\n    realmOrder\n    data\n    timestamp\n  }\n}"): (typeof documents)["query getAccount($account: String!, $realmIds: [Int!]) @api(name: starkIndexer) {\n  ownedRealmsCount: realmsCount(filter: {ownerL2: {equals: $account}})\n  settledRealmsCount: realmsCount(filter: {settledOwner: {equals: $account}})\n  accountHistory: getRealmHistory(filter: {realmId: {in: $realmIds}}) {\n    id\n    eventType\n    eventId\n    realmId\n    realmOwner\n    realmName\n    realmOrder\n    data\n    timestamp\n  }\n}"];
export function graphql(source: "query getGameConstants @api(name: starkIndexer) {\n  battalionStats: battalionStats {\n    battalionId\n    battalionName\n    type\n    combatType\n    value\n    requiredBuildingId\n    requiredBuildingName\n  }\n  buildingCosts: getBuildingCosts {\n    buildingId\n    buildingName\n    amount\n    resources\n  }\n  battalionCosts {\n    battalionId\n    battalionName\n    resources\n  }\n}"): (typeof documents)["query getGameConstants @api(name: starkIndexer) {\n  battalionStats: battalionStats {\n    battalionId\n    battalionName\n    type\n    combatType\n    value\n    requiredBuildingId\n    requiredBuildingName\n  }\n  buildingCosts: getBuildingCosts {\n    buildingId\n    buildingName\n    amount\n    resources\n  }\n  battalionCosts {\n    battalionId\n    battalionName\n    resources\n  }\n}"];
export function graphql(source: "query getRealm($id: Float!) @api(name: starkIndexer) {\n  realm(id: $id) {\n    ...RealmFragment\n  }\n}\n\nquery getBuildingsByRealmId($id: Float!) @api(name: starkIndexer) {\n  getBuildingsByRealmId(id: $id) {\n    realmId\n    buildingId\n    buildingName\n    buildingIntegrity\n    limit\n    limitTraitId\n    limitTraitName\n    count\n    population\n    food\n    culture\n    buildingCost {\n      amount\n      resources\n    }\n  }\n}\n\nquery getFoodByRealmId($id: Float!) @api(name: starkIndexer) {\n  getFoodByRealmId(id: $id) {\n    realmId\n    buildingId\n    buildingName\n    qty\n    harvests\n    createdAt\n  }\n}\n\nquery getRealmHistory($filter: RealmHistoryWhereInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  getRealmHistory(filter: $filter, take: $take, skip: $skip) {\n    id\n    eventId\n    eventType\n    realmId\n    realmOwner\n    data\n    timestamp\n    transactionHash\n  }\n}\n\nquery groupByRealmHistory($by: [RealmHistoryScalarFieldEnum!]!, $orderBy: [RealmHistoryOrderByWithAggregationInput!], $where: RealmHistoryWhereInput, $take: Int, $skip: Int, $isOwner: Boolean!) @api(name: starkIndexer) {\n  groupByRealmHistory(\n    by: $by\n    where: $where\n    orderBy: $orderBy\n    take: $take\n    skip: $skip\n  ) {\n    realmId @skip(if: $isOwner)\n    realmOwner @include(if: $isOwner)\n    _count {\n      _all\n    }\n  }\n}\n\nquery getRealmCombatResult($defendRealmId: Float!, $transactionHash: String!) @api(name: starkIndexer) {\n  getRealmCombatResult(\n    defendRealmId: $defendRealmId\n    transactionHash: $transactionHash\n  ) {\n    defendRealmId\n    attackRealmId\n    transactionHash\n    history {\n      eventType\n      attackSquad\n      defendSquad\n      outcome\n      attackType\n      hitPoints\n      timestamp\n    }\n    resourcesPillaged {\n      resourceId\n      resourceName\n      amount\n    }\n    relicLost\n    outcome\n    timestamp\n  }\n}"): (typeof documents)["query getRealm($id: Float!) @api(name: starkIndexer) {\n  realm(id: $id) {\n    ...RealmFragment\n  }\n}\n\nquery getBuildingsByRealmId($id: Float!) @api(name: starkIndexer) {\n  getBuildingsByRealmId(id: $id) {\n    realmId\n    buildingId\n    buildingName\n    buildingIntegrity\n    limit\n    limitTraitId\n    limitTraitName\n    count\n    population\n    food\n    culture\n    buildingCost {\n      amount\n      resources\n    }\n  }\n}\n\nquery getFoodByRealmId($id: Float!) @api(name: starkIndexer) {\n  getFoodByRealmId(id: $id) {\n    realmId\n    buildingId\n    buildingName\n    qty\n    harvests\n    createdAt\n  }\n}\n\nquery getRealmHistory($filter: RealmHistoryWhereInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  getRealmHistory(filter: $filter, take: $take, skip: $skip) {\n    id\n    eventId\n    eventType\n    realmId\n    realmOwner\n    data\n    timestamp\n    transactionHash\n  }\n}\n\nquery groupByRealmHistory($by: [RealmHistoryScalarFieldEnum!]!, $orderBy: [RealmHistoryOrderByWithAggregationInput!], $where: RealmHistoryWhereInput, $take: Int, $skip: Int, $isOwner: Boolean!) @api(name: starkIndexer) {\n  groupByRealmHistory(\n    by: $by\n    where: $where\n    orderBy: $orderBy\n    take: $take\n    skip: $skip\n  ) {\n    realmId @skip(if: $isOwner)\n    realmOwner @include(if: $isOwner)\n    _count {\n      _all\n    }\n  }\n}\n\nquery getRealmCombatResult($defendRealmId: Float!, $transactionHash: String!) @api(name: starkIndexer) {\n  getRealmCombatResult(\n    defendRealmId: $defendRealmId\n    transactionHash: $transactionHash\n  ) {\n    defendRealmId\n    attackRealmId\n    transactionHash\n    history {\n      eventType\n      attackSquad\n      defendSquad\n      outcome\n      attackType\n      hitPoints\n      timestamp\n    }\n    resourcesPillaged {\n      resourceId\n      resourceName\n      amount\n    }\n    relicLost\n    outcome\n    timestamp\n  }\n}"];
export function graphql(source: "query getRealms($filter: RealmWhereInput, $orderBy: RealmOrderByWithRelationInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  realms(filter: $filter, orderBy: $orderBy, take: $take, skip: $skip) {\n    ...RealmFragment\n  }\n  total: realmsCount(filter: $filter)\n}\n\nquery getRealmsWithTravels($filter: RealmWhereInput, $travelsWhere: TravelWhereInput, $orderBy: RealmOrderByWithRelationInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  realms(filter: $filter, orderBy: $orderBy, take: $take, skip: $skip) {\n    ...RealmFragment\n  }\n  travels(where: $travelsWhere) {\n    ...TravelFragment\n  }\n  total: realmsCount(filter: $filter)\n}"): (typeof documents)["query getRealms($filter: RealmWhereInput, $orderBy: RealmOrderByWithRelationInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  realms(filter: $filter, orderBy: $orderBy, take: $take, skip: $skip) {\n    ...RealmFragment\n  }\n  total: realmsCount(filter: $filter)\n}\n\nquery getRealmsWithTravels($filter: RealmWhereInput, $travelsWhere: TravelWhereInput, $orderBy: RealmOrderByWithRelationInput, $take: Float, $skip: Float) @api(name: starkIndexer) {\n  realms(filter: $filter, orderBy: $orderBy, take: $take, skip: $skip) {\n    ...RealmFragment\n  }\n  travels(where: $travelsWhere) {\n    ...TravelFragment\n  }\n  total: realmsCount(filter: $filter)\n}"];
export function graphql(source: "query getTroopStats @api(name: starkIndexer) {\n  getTroopStats {\n    troopId\n    troopName\n    type\n    tier\n    agility\n    attack\n    armor\n    vitality\n    wisdom\n    troopCost {\n      amount\n      resources\n    }\n  }\n}"): (typeof documents)["query getTroopStats @api(name: starkIndexer) {\n  getTroopStats {\n    troopId\n    troopName\n    type\n    tier\n    agility\n    attack\n    armor\n    vitality\n    wisdom\n    troopCost {\n      amount\n      resources\n    }\n  }\n}"];
export function graphql(source: "fragment RealmFragment on Realm {\n  realmId\n  owner\n  bridgedOwner\n  ownerL2\n  settledOwner\n  name\n  rarityRank\n  rarityScore\n  orderType\n  wonder\n  lastAttacked\n  lastClaimTime\n  lastVaultTime\n  longitude\n  latitude\n  resources {\n    resourceId\n    resourceName\n    level\n    upgrades\n  }\n  traits {\n    type\n    qty\n  }\n  relic {\n    realmId\n    heldByRealm\n  }\n  relicsOwned {\n    realmId\n    heldByRealm\n  }\n  ...RealmBuildingsFragment\n  ...RealmTroopsFragment\n  ...RealmArmiesFragment\n}"): (typeof documents)["fragment RealmFragment on Realm {\n  realmId\n  owner\n  bridgedOwner\n  ownerL2\n  settledOwner\n  name\n  rarityRank\n  rarityScore\n  orderType\n  wonder\n  lastAttacked\n  lastClaimTime\n  lastVaultTime\n  longitude\n  latitude\n  resources {\n    resourceId\n    resourceName\n    level\n    upgrades\n  }\n  traits {\n    type\n    qty\n  }\n  relic {\n    realmId\n    heldByRealm\n  }\n  relicsOwned {\n    realmId\n    heldByRealm\n  }\n  ...RealmBuildingsFragment\n  ...RealmTroopsFragment\n  ...RealmArmiesFragment\n}"];
export function graphql(source: "fragment RealmArmiesFragment on Realm {\n  ownArmies {\n    armyId\n    realmId\n    xp\n    destinationRealmId\n    destinationArrivalTime\n    armyPacked\n    lastAttacked\n    xp\n    level\n    callSign\n    lightCavalryQty\n    lightCavalryHealth\n    heavyCavalryQty\n    heavyCavalryHealth\n    archerQty\n    archerHealth\n    longbowQty\n    longbowHealth\n    mageQty\n    mageHealth\n    arcanistQty\n    arcanistHealth\n    lightInfantryQty\n    lightInfantryHealth\n    heavyInfantryQty\n    heavyInfantryHealth\n  }\n}"): (typeof documents)["fragment RealmArmiesFragment on Realm {\n  ownArmies {\n    armyId\n    realmId\n    xp\n    destinationRealmId\n    destinationArrivalTime\n    armyPacked\n    lastAttacked\n    xp\n    level\n    callSign\n    lightCavalryQty\n    lightCavalryHealth\n    heavyCavalryQty\n    heavyCavalryHealth\n    archerQty\n    archerHealth\n    longbowQty\n    longbowHealth\n    mageQty\n    mageHealth\n    arcanistQty\n    arcanistHealth\n    lightInfantryQty\n    lightInfantryHealth\n    heavyInfantryQty\n    heavyInfantryHealth\n  }\n}"];
export function graphql(source: "fragment RealmBuildingsFragment on Realm {\n  buildings {\n    buildingId\n    buildingName\n    buildingIntegrity\n    count\n    population\n    culture\n    food\n    limitTraitId\n    limitTraitName\n  }\n}"): (typeof documents)["fragment RealmBuildingsFragment on Realm {\n  buildings {\n    buildingId\n    buildingName\n    buildingIntegrity\n    count\n    population\n    culture\n    food\n    limitTraitId\n    limitTraitName\n  }\n}"];
export function graphql(source: "fragment RealmTroopsFragment on Realm {\n  troops {\n    realmId\n    troopId\n    troopName\n    index\n    type\n    tier\n    agility\n    attack\n    armor\n    vitality\n    wisdom\n    squadSlot\n  }\n}"): (typeof documents)["fragment RealmTroopsFragment on Realm {\n  troops {\n    realmId\n    troopId\n    troopName\n    index\n    type\n    tier\n    agility\n    attack\n    armor\n    vitality\n    wisdom\n    squadSlot\n  }\n}"];
export function graphql(source: "fragment TravelFragment on Travel {\n  contractId\n  tokenId\n  nestedId\n  destinationContractId\n  destinationTokenId\n  destinationNestedId\n  destinationArrivalTime\n}"): (typeof documents)["fragment TravelFragment on Travel {\n  contractId\n  tokenId\n  nestedId\n  destinationContractId\n  destinationTokenId\n  destinationNestedId\n  destinationArrivalTime\n}"];
export function graphql(source: "fragment ResourceFragment on Resource {\n  id\n  resourceId\n  resourceName\n  realmId\n}"): (typeof documents)["fragment ResourceFragment on Resource {\n  id\n  resourceId\n  resourceName\n  realmId\n}"];
export function graphql(source: "query getWallet($address: String!) @api(name: starkIndexer) {\n  getWallet(address: $address) {\n    address\n    realmsL1Held\n    realmsL2Held\n    realmsSettledHeld\n    realmsBridgedHeld\n  }\n}"): (typeof documents)["query getWallet($address: String!) @api(name: starkIndexer) {\n  getWallet(address: $address) {\n    address\n    realmsL1Held\n    realmsL2Held\n    realmsSettledHeld\n    realmsBridgedHeld\n  }\n}"];
export function graphql(source: "query GetWalletBalances($address: String!) @api(name: starkIndexer) {\n  walletBalances(where: {address: {equals: $address}}, orderBy: {tokenId: asc}) {\n    tokenId\n    amount\n  }\n}"): (typeof documents)["query GetWalletBalances($address: String!) @api(name: starkIndexer) {\n  walletBalances(where: {address: {equals: $address}}, orderBy: {tokenId: asc}) {\n    tokenId\n    amount\n  }\n}"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;