/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

const documents = {
    "\n  fragment RealmOverview on Realm {\n    rarityRank\n    rarityScore\n    resources {\n      resourceId\n    }\n    traits {\n      type\n      qty\n    }\n  }\n": types.RealmOverviewFragmentDoc,
    "\n  fragment RealmCard on Realm {\n    realmId\n    name\n    orderType\n    wonder\n    owner\n    bridgedOwner\n    ownerL2\n    settledOwner\n  }\n": types.RealmCardFragmentDoc,
    "\n  fragment RealmArmies on Realm {\n    ownArmies {\n      armyId\n      realmId\n      xp\n      destinationRealmId\n      destinationArrivalTime\n      # // ArmyData\n      armyPacked\n      lastAttacked\n      xp\n      level\n      callSign\n\n      # Battallion stats\n      lightCavalryQty\n      lightCavalryHealth\n      heavyCavalryQty\n      heavyCavalryHealth\n      archerQty\n      archerHealth\n      longbowQty\n      longbowHealth\n      mageQty\n      mageHealth\n      arcanistQty\n      arcanistHealth\n      lightInfantryQty\n      lightInfantryHealth\n      heavyInfantryQty\n      heavyInfantryHealth\n    }\n  }\n": types.RealmArmiesFragmentDoc,
    "\n  fragment RealmBuildings on Realm {\n    buildings {\n      buildingId\n      buildingName\n      buildingIntegrity\n      count\n      population\n      culture\n      food\n      limitTraitId\n      limitTraitName\n    }\n  }\n": types.RealmBuildingsFragmentDoc,
    "\n  fragment RealmItem on Realm {\n    realmId\n    owner\n    bridgedOwner\n    ownerL2\n    settledOwner\n    name\n    rarityRank\n    rarityScore\n    orderType\n    wonder\n    lastAttacked\n    lastClaimTime\n    lastVaultTime\n    longitude\n    latitude\n    resources {\n      resourceId\n      resourceName\n      level\n      upgrades\n    }\n    traits {\n      type\n      qty\n    }\n    relic {\n      realmId\n      heldByRealm\n    }\n    relicsOwned {\n      realmId\n      heldByRealm\n    }\n  }\n": types.RealmItemFragmentDoc,
    "\n  query getRealms($take: Float) {\n    realms(take: $take) {\n      ...RealmCard\n      ...RealmOverview\n    }\n  }\n": types.GetRealmsDocument,
};

export function graphql(source: "\n  fragment RealmOverview on Realm {\n    rarityRank\n    rarityScore\n    resources {\n      resourceId\n    }\n    traits {\n      type\n      qty\n    }\n  }\n"): (typeof documents)["\n  fragment RealmOverview on Realm {\n    rarityRank\n    rarityScore\n    resources {\n      resourceId\n    }\n    traits {\n      type\n      qty\n    }\n  }\n"];
export function graphql(source: "\n  fragment RealmCard on Realm {\n    realmId\n    name\n    orderType\n    wonder\n    owner\n    bridgedOwner\n    ownerL2\n    settledOwner\n  }\n"): (typeof documents)["\n  fragment RealmCard on Realm {\n    realmId\n    name\n    orderType\n    wonder\n    owner\n    bridgedOwner\n    ownerL2\n    settledOwner\n  }\n"];
export function graphql(source: "\n  fragment RealmArmies on Realm {\n    ownArmies {\n      armyId\n      realmId\n      xp\n      destinationRealmId\n      destinationArrivalTime\n      # // ArmyData\n      armyPacked\n      lastAttacked\n      xp\n      level\n      callSign\n\n      # Battallion stats\n      lightCavalryQty\n      lightCavalryHealth\n      heavyCavalryQty\n      heavyCavalryHealth\n      archerQty\n      archerHealth\n      longbowQty\n      longbowHealth\n      mageQty\n      mageHealth\n      arcanistQty\n      arcanistHealth\n      lightInfantryQty\n      lightInfantryHealth\n      heavyInfantryQty\n      heavyInfantryHealth\n    }\n  }\n"): (typeof documents)["\n  fragment RealmArmies on Realm {\n    ownArmies {\n      armyId\n      realmId\n      xp\n      destinationRealmId\n      destinationArrivalTime\n      # // ArmyData\n      armyPacked\n      lastAttacked\n      xp\n      level\n      callSign\n\n      # Battallion stats\n      lightCavalryQty\n      lightCavalryHealth\n      heavyCavalryQty\n      heavyCavalryHealth\n      archerQty\n      archerHealth\n      longbowQty\n      longbowHealth\n      mageQty\n      mageHealth\n      arcanistQty\n      arcanistHealth\n      lightInfantryQty\n      lightInfantryHealth\n      heavyInfantryQty\n      heavyInfantryHealth\n    }\n  }\n"];
export function graphql(source: "\n  fragment RealmBuildings on Realm {\n    buildings {\n      buildingId\n      buildingName\n      buildingIntegrity\n      count\n      population\n      culture\n      food\n      limitTraitId\n      limitTraitName\n    }\n  }\n"): (typeof documents)["\n  fragment RealmBuildings on Realm {\n    buildings {\n      buildingId\n      buildingName\n      buildingIntegrity\n      count\n      population\n      culture\n      food\n      limitTraitId\n      limitTraitName\n    }\n  }\n"];
export function graphql(source: "\n  fragment RealmItem on Realm {\n    realmId\n    owner\n    bridgedOwner\n    ownerL2\n    settledOwner\n    name\n    rarityRank\n    rarityScore\n    orderType\n    wonder\n    lastAttacked\n    lastClaimTime\n    lastVaultTime\n    longitude\n    latitude\n    resources {\n      resourceId\n      resourceName\n      level\n      upgrades\n    }\n    traits {\n      type\n      qty\n    }\n    relic {\n      realmId\n      heldByRealm\n    }\n    relicsOwned {\n      realmId\n      heldByRealm\n    }\n  }\n"): (typeof documents)["\n  fragment RealmItem on Realm {\n    realmId\n    owner\n    bridgedOwner\n    ownerL2\n    settledOwner\n    name\n    rarityRank\n    rarityScore\n    orderType\n    wonder\n    lastAttacked\n    lastClaimTime\n    lastVaultTime\n    longitude\n    latitude\n    resources {\n      resourceId\n      resourceName\n      level\n      upgrades\n    }\n    traits {\n      type\n      qty\n    }\n    relic {\n      realmId\n      heldByRealm\n    }\n    relicsOwned {\n      realmId\n      heldByRealm\n    }\n  }\n"];
export function graphql(source: "\n  query getRealms($take: Float) {\n    realms(take: $take) {\n      ...RealmCard\n      ...RealmOverview\n    }\n  }\n"): (typeof documents)["\n  query getRealms($take: Float) {\n    realms(take: $take) {\n      ...RealmCard\n      ...RealmOverview\n    }\n  }\n"];

export function graphql(source: string): unknown;
export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;